# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rover_pb2 as rover__pb2


class RoverServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_files = channel.unary_unary(
                '/RoverService/create_files',
                request_serializer=rover__pb2.getMapRequest.SerializeToString,
                response_deserializer=rover__pb2.getMapResponse.FromString,
                )
        self.rover_scrape = channel.unary_unary(
                '/RoverService/rover_scrape',
                request_serializer=rover__pb2.getMovesRequest.SerializeToString,
                response_deserializer=rover__pb2.getMovesResponse.FromString,
                )
        self.farm_keys = channel.unary_unary(
                '/RoverService/farm_keys',
                request_serializer=rover__pb2.getSerialNumRequest.SerializeToString,
                response_deserializer=rover__pb2.getSerialNumResponse.FromString,
                )
        self.isAlive = channel.unary_unary(
                '/RoverService/isAlive',
                request_serializer=rover__pb2.isSuccessRequest.SerializeToString,
                response_deserializer=rover__pb2.isSuccessResponse.FromString,
                )
        self.sendPin = channel.unary_unary(
                '/RoverService/sendPin',
                request_serializer=rover__pb2.PinRequest.SerializeToString,
                response_deserializer=rover__pb2.PinResponse.FromString,
                )


class RoverServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_files(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rover_scrape(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def farm_keys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isAlive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendPin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoverServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_files': grpc.unary_unary_rpc_method_handler(
                    servicer.create_files,
                    request_deserializer=rover__pb2.getMapRequest.FromString,
                    response_serializer=rover__pb2.getMapResponse.SerializeToString,
            ),
            'rover_scrape': grpc.unary_unary_rpc_method_handler(
                    servicer.rover_scrape,
                    request_deserializer=rover__pb2.getMovesRequest.FromString,
                    response_serializer=rover__pb2.getMovesResponse.SerializeToString,
            ),
            'farm_keys': grpc.unary_unary_rpc_method_handler(
                    servicer.farm_keys,
                    request_deserializer=rover__pb2.getSerialNumRequest.FromString,
                    response_serializer=rover__pb2.getSerialNumResponse.SerializeToString,
            ),
            'isAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.isAlive,
                    request_deserializer=rover__pb2.isSuccessRequest.FromString,
                    response_serializer=rover__pb2.isSuccessResponse.SerializeToString,
            ),
            'sendPin': grpc.unary_unary_rpc_method_handler(
                    servicer.sendPin,
                    request_deserializer=rover__pb2.PinRequest.FromString,
                    response_serializer=rover__pb2.PinResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RoverService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RoverService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_files(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RoverService/create_files',
            rover__pb2.getMapRequest.SerializeToString,
            rover__pb2.getMapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rover_scrape(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RoverService/rover_scrape',
            rover__pb2.getMovesRequest.SerializeToString,
            rover__pb2.getMovesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def farm_keys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RoverService/farm_keys',
            rover__pb2.getSerialNumRequest.SerializeToString,
            rover__pb2.getSerialNumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RoverService/isAlive',
            rover__pb2.isSuccessRequest.SerializeToString,
            rover__pb2.isSuccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendPin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RoverService/sendPin',
            rover__pb2.PinRequest.SerializeToString,
            rover__pb2.PinResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
